import numpy as np


# 标准化
# 将数据转化到较小的范围内，剔除数据量级对结果的影响
# 可以加速计算，提高效率

# 常用的标准化方式：
# （1）离差标准化
# 对原始数据进行线性变换，将数据变换到[0,1]内部
# 公式：new_x = (x - min) / (max - min)
def min_max_scalar(data):
    """
    离差标准化来标准化数据
    :param data: 需要标准化的数据
    :return: 标准化之后的数据
    """
    data = (data - data.min()) / (data.max() - data.min())

    return data


# 特点：
# 1、数据分布不会发生改变
# 2、数据在[0,1]之间
# 3、如果最大值、最小值之间差距过大，会导致转化后的数据整体趋向于0，且数据之间相差较小
# 4、如果出现新的数据在[min,max]之外，那么此时再转化的就会报错（转化之后不在[0,1]之间）。

# （2）标准差标准化
# 转化之后的数据均值为0，标注差为1， --->标准正态分布的数据
# 公式： new_x = (x - mean) / std
def stand_scalar(data):
    """
    标准差标准化数据
    :param data: 需要标准化的数据
    :return:标准化之后的数据
    """
    data = (data - data.mean()) / data.std()

    return data


# 1、数据分布整体不会发生变化
# 2、数据分布的0的两侧

# （3）小数定标标准化
# 通过移动小数点的位置，来将数据映射到[-1,1]之间
# x = x / 10 ^ k
# k = |x| -->最大值 ---> log10  -->向上取整 --->转化为int
# 存在一个Series ---[-99,99] --->[0,99] --->99 --->1.x ---->2.0 --->2  --->[-0.99,0.99]
def decimal_scalar(data):
    """
    小数定标标准化数据
    :param data: 需要标准化的数据
    :return: 标准化之后的数据
    """
    data = data / (10 ** (int(np.ceil(np.log10(data.abs().max())))))

    return data

# 特点：
# 1、数据分布不会变化
# 2、将数据转化为[-1,1]之间

# 小数定标标准化、标准差标准化受到异常值影响较小
# 离差标准化受到异常值影响较大

# 标准化不再具有实际解释意义，主要用于后续输入算法，进行计算


